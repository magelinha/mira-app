{"version":3,"sources":["sprintf.js"],"names":["window","sprintf","key","arguments","cache","hasOwnProperty","parse","format","call","get_type","variable","Object","prototype","toString","slice","toLowerCase","str_repeat","input","multiplier","preformattedPadding","Array","join","re","not_string","not_bool","not_type","not_primitive","number","numeric_arg","json","not_json","text","modulo","placeholder","key_access","index_access","sign","parse_tree","argv","arg","i","k","match","pad","pad_character","pad_length","cursor","tree_length","length","node_type","output","is_positive","Error","test","isNaN","TypeError","parseInt","String","fromCharCode","JSON","stringify","parseFloat","toExponential","toFixed","toPrecision","substring","valueOf","toUpperCase","replace","charAt","fmt","_fmt","arg_names","exec","SyntaxError","field_list","replacement_field","field_match","vsprintf","_argv","splice","apply","0"," ","_","exports","define","amd","this"],"mappings":"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","file":"sprintf.min.js","sourcesContent":["/* globals window, exports, define */\r\n\r\n(function(window) {\r\n    'use strict'\r\n\r\n    var re = {\r\n        not_string: /[^s]/,\r\n        not_bool: /[^t]/,\r\n        not_type: /[^T]/,\r\n        not_primitive: /[^v]/,\r\n        number: /[diefg]/,\r\n        numeric_arg: /[bcdiefguxX]/,\r\n        json: /[j]/,\r\n        not_json: /[^j]/,\r\n        text: /^[^\\x25]+/,\r\n        modulo: /^\\x25{2}/,\r\n        placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxX])/,\r\n        key: /^([a-z_][a-z_\\d]*)/i,\r\n        key_access: /^\\.([a-z_][a-z_\\d]*)/i,\r\n        index_access: /^\\[(\\d+)\\]/,\r\n        sign: /^[\\+\\-]/\r\n    }\r\n\r\n    function sprintf() {\r\n        var key = arguments[0], cache = sprintf.cache\r\n        if (!(cache[key] && cache.hasOwnProperty(key))) {\r\n            cache[key] = sprintf.parse(key)\r\n        }\r\n        return sprintf.format.call(null, cache[key], arguments)\r\n    }\r\n\r\n    sprintf.format = function(parse_tree, argv) {\r\n        var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length, is_positive = true, sign = ''\r\n        for (i = 0; i < tree_length; i++) {\r\n            node_type = get_type(parse_tree[i])\r\n            if (node_type === 'string') {\r\n                output[output.length] = parse_tree[i]\r\n            }\r\n            else if (node_type === 'array') {\r\n                match = parse_tree[i] // convenience purposes only\r\n                if (match[2]) { // keyword argument\r\n                    arg = argv[cursor]\r\n                    for (k = 0; k < match[2].length; k++) {\r\n                        if (!arg.hasOwnProperty(match[2][k])) {\r\n                            throw new Error(sprintf('[sprintf] property \"%s\" does not exist', match[2][k]))\r\n                        }\r\n                        arg = arg[match[2][k]]\r\n                    }\r\n                }\r\n                else if (match[1]) { // positional argument (explicit)\r\n                    arg = argv[match[1]]\r\n                }\r\n                else { // positional argument (implicit)\r\n                    arg = argv[cursor++]\r\n                }\r\n\r\n                if (re.not_type.test(match[8]) && re.not_primitive.test(match[8]) && get_type(arg) == 'function') {\r\n                    arg = arg()\r\n                }\r\n\r\n                if (re.numeric_arg.test(match[8]) && (get_type(arg) != 'number' && isNaN(arg))) {\r\n                    throw new TypeError(sprintf(\"[sprintf] expecting number but found %s\", get_type(arg)))\r\n                }\r\n\r\n                if (re.number.test(match[8])) {\r\n                    is_positive = arg >= 0\r\n                }\r\n\r\n                switch (match[8]) {\r\n                    case 'b':\r\n                        arg = parseInt(arg, 10).toString(2)\r\n                    break\r\n                    case 'c':\r\n                        arg = String.fromCharCode(parseInt(arg, 10))\r\n                    break\r\n                    case 'd':\r\n                    case 'i':\r\n                        arg = parseInt(arg, 10)\r\n                    break\r\n                    case 'j':\r\n                        arg = JSON.stringify(arg, null, match[6] ? parseInt(match[6]) : 0)\r\n                    break\r\n                    case 'e':\r\n                        arg = match[7] ? parseFloat(arg).toExponential(match[7]) : parseFloat(arg).toExponential()\r\n                    break\r\n                    case 'f':\r\n                        arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg)\r\n                    break\r\n                    case 'g':\r\n                        arg = match[7] ? parseFloat(arg).toPrecision(match[7]) : parseFloat(arg)\r\n                    break\r\n                    case 'o':\r\n                        arg = arg.toString(8)\r\n                    break\r\n                    case 's':\r\n                        arg = String(arg)\r\n                        arg = (match[7] ? arg.substring(0, match[7]) : arg)\r\n                    break\r\n                    case 't':\r\n                        arg = String(!!arg)\r\n                        arg = (match[7] ? arg.substring(0, match[7]) : arg)\r\n                    break\r\n                    case 'T':\r\n                        arg = get_type(arg)\r\n                        arg = (match[7] ? arg.substring(0, match[7]) : arg)\r\n                    break\r\n                    case 'u':\r\n                        arg = parseInt(arg, 10) >>> 0\r\n                    break\r\n                    case 'v':\r\n                        arg = arg.valueOf()\r\n                        arg = (match[7] ? arg.substring(0, match[7]) : arg)\r\n                    break\r\n                    case 'x':\r\n                        arg = parseInt(arg, 10).toString(16)\r\n                    break\r\n                    case 'X':\r\n                        arg = parseInt(arg, 10).toString(16).toUpperCase()\r\n                    break\r\n                }\r\n                if (re.json.test(match[8])) {\r\n                    output[output.length] = arg\r\n                }\r\n                else {\r\n                    if (re.number.test(match[8]) && (!is_positive || match[3])) {\r\n                        sign = is_positive ? '+' : '-'\r\n                        arg = arg.toString().replace(re.sign, '')\r\n                    }\r\n                    else {\r\n                        sign = ''\r\n                    }\r\n                    pad_character = match[4] ? match[4] === '0' ? '0' : match[4].charAt(1) : ' '\r\n                    pad_length = match[6] - (sign + arg).length\r\n                    pad = match[6] ? (pad_length > 0 ? str_repeat(pad_character, pad_length) : '') : ''\r\n                    output[output.length] = match[5] ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg)\r\n                }\r\n            }\r\n        }\r\n        return output.join('')\r\n    }\r\n\r\n    sprintf.cache = {}\r\n\r\n    sprintf.parse = function(fmt) {\r\n        var _fmt = fmt, match = [], parse_tree = [], arg_names = 0\r\n        while (_fmt) {\r\n            if ((match = re.text.exec(_fmt)) !== null) {\r\n                parse_tree[parse_tree.length] = match[0]\r\n            }\r\n            else if ((match = re.modulo.exec(_fmt)) !== null) {\r\n                parse_tree[parse_tree.length] = '%'\r\n            }\r\n            else if ((match = re.placeholder.exec(_fmt)) !== null) {\r\n                if (match[2]) {\r\n                    arg_names |= 1\r\n                    var field_list = [], replacement_field = match[2], field_match = []\r\n                    if ((field_match = re.key.exec(replacement_field)) !== null) {\r\n                        field_list[field_list.length] = field_match[1]\r\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\r\n                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {\r\n                                field_list[field_list.length] = field_match[1]\r\n                            }\r\n                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\r\n                                field_list[field_list.length] = field_match[1]\r\n                            }\r\n                            else {\r\n                                throw new SyntaxError(\"[sprintf] failed to parse named argument key\")\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        throw new SyntaxError(\"[sprintf] failed to parse named argument key\")\r\n                    }\r\n                    match[2] = field_list\r\n                }\r\n                else {\r\n                    arg_names |= 2\r\n                }\r\n                if (arg_names === 3) {\r\n                    throw new Error(\"[sprintf] mixing positional and named placeholders is not (yet) supported\")\r\n                }\r\n                parse_tree[parse_tree.length] = match\r\n            }\r\n            else {\r\n                throw new SyntaxError(\"[sprintf] unexpected placeholder\")\r\n            }\r\n            _fmt = _fmt.substring(match[0].length)\r\n        }\r\n        return parse_tree\r\n    }\r\n\r\n    var vsprintf = function(fmt, argv, _argv) {\r\n        _argv = (argv || []).slice(0)\r\n        _argv.splice(0, 0, fmt)\r\n        return sprintf.apply(null, _argv)\r\n    }\r\n\r\n    /**\r\n     * helpers\r\n     */\r\n    function get_type(variable) {\r\n        if (typeof variable === 'number') {\r\n            return 'number'\r\n        }\r\n        else if (typeof variable === 'string') {\r\n            return 'string'\r\n        }\r\n        else {\r\n            return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase()\r\n        }\r\n    }\r\n\r\n    var preformattedPadding = {\r\n        '0': ['', '0', '00', '000', '0000', '00000', '000000', '0000000'],\r\n        ' ': ['', ' ', '  ', '   ', '    ', '     ', '      ', '       '],\r\n        '_': ['', '_', '__', '___', '____', '_____', '______', '_______'],\r\n    }\r\n    function str_repeat(input, multiplier) {\r\n        if (multiplier >= 0 && multiplier <= 7 && preformattedPadding[input]) {\r\n            return preformattedPadding[input][multiplier]\r\n        }\r\n        return Array(multiplier + 1).join(input)\r\n    }\r\n\r\n    /**\r\n     * export to either browser or node.js\r\n     */\r\n    if (typeof exports !== 'undefined') {\r\n        exports.sprintf = sprintf\r\n        exports.vsprintf = vsprintf\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        window.sprintf = sprintf\r\n        window.vsprintf = vsprintf\r\n\r\n        if (typeof define === 'function' && define.amd) {\r\n            define(function() {\r\n                return {\r\n                    sprintf: sprintf,\r\n                    vsprintf: vsprintf\r\n                }\r\n            })\r\n        }\r\n    }\r\n})(typeof window === 'undefined' ? this : window);\r\n"]}